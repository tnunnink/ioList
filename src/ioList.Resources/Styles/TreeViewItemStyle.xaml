<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:t="clr-namespace:ioList.Resources.Theming"
                    xmlns:ui="http://gmerge.com/ui/wpf"
                    xmlns:converters="clr-namespace:ioList.Resources.Converters"
                    xmlns:ap="clr-namespace:ioList.Resources.AttachedProperties">

  <ControlTemplate x:Key="CheckboxTemplate" TargetType="{x:Type CheckBox}">
    <Grid x:Name="TemplateRoot"
          Background="Transparent"
          SnapsToDevicePixels="True">
      <Border x:Name="FocusBorder"
              Grid.Column="0"
              Margin="1"
              CornerRadius="{Binding Path=ActualHeight, ElementName=CheckBoxBorder}"
              Width="{Binding Path=ActualHeight, ElementName=CheckBoxBorder}"
              Height="{Binding ElementName=CheckBoxBorder, Path=ActualHeight}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              BorderBrush="{t:ThemeResource ResourceKey=ControlFocusBorder}"
              BorderThickness="1">
      </Border>
      <Border Grid.Column="0" x:Name="CheckBoxBorder"
              Margin="1"
              Height="{TemplateBinding Height}"
              CornerRadius="{Binding Path=ActualHeight, ElementName=CheckBoxBorder}"
              Width="{Binding Path=ActualHeight, ElementName=CheckBoxBorder}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
        <Grid x:Name="Mark"
              Visibility="Hidden"
              Margin="2">
          <Ellipse Height="{Binding Path=ActualHeight, ElementName=Mark}"
                   Width="{Binding Path=ActualWidth, ElementName=Mark}"
                   Fill="{t:ThemeResource ResourceKey=GlyphForeground}" />
        </Grid>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{t:ThemeResource ResourceKey=ControlDisabledOpacity}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="Mark" Property="Visibility" Value="Visible" />
        <Setter TargetName="CheckBoxBorder" Property="Background" Value="{t:ThemeResource ResourceKey=CheckBoxChecked}" />
        <Setter TargetName="CheckBoxBorder" Property="BorderBrush"
                Value="{t:ThemeResource ResourceKey=CheckBoxChecked}" />
      </Trigger>
      <Trigger Property="IsFocused" Value="True">
        <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="CheckboxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Background" Value="{t:ThemeResource ResourceKey=ControlBackground}" />
    <Setter Property="BorderBrush" Value="{t:ThemeResource ResourceKey=ControlBorder}" />
    <Setter Property="Foreground" Value="{t:ThemeResource ResourceKey=ControlForeground}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Height" Value="12" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template" Value="{StaticResource CheckboxTemplate}" />
  </Style>

  <PathGeometry x:Key="TreeArrow" Figures="M10,17L15,12L10,7V17Z" />
  <ControlTemplate x:Key="ExpandCollapseToggleTemplate" TargetType="{x:Type ToggleButton}">
    <Border
      Width="10" Height="10"
      Background="Transparent">
      <Viewbox>
        <Path x:Name="ExpandPath"
              RenderTransformOrigin="0.5, 0.5"
              Stretch="Uniform"
              Data="{StaticResource TreeArrow}"
              Fill="{t:ThemeResource ResourceKey=IconForeground}" />
      </Viewbox>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="ExpandPath" Property="RenderTransform">
          <Setter.Value>
            <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Template" Value="{StaticResource ExpandCollapseToggleTemplate}" />
  </Style>

  <ControlTemplate x:Key="TreeViewItemTemplate" TargetType="{x:Type TreeViewItem}">
    <ControlTemplate.Resources>
      <converters:LeftMarginMultiplierConverter Length="20" x:Key="LengthConverter" />
    </ControlTemplate.Resources>

    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition />
      </Grid.RowDefinitions>

      <Border Grid.Row="0" Name="Bd"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}"
              CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(ap:BorderProperties.CornerRadius)}"
              Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource LengthConverter}}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>

          <Border Grid.Column="0"
                  x:Name="CheckBox"
                  CornerRadius="5 0 0 5"
                  Background="LightSlateGray">
            <CheckBox Style="{StaticResource CheckboxStyle}"
                      Margin="10 0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center" />
          </Border>

          <ToggleButton Grid.Column="1"
                        x:Name="Expander"
                        Style="{StaticResource ExpandCollapseToggleStyle}"
                        IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded}"
                        ClickMode="Press" />

          <ContentPresenter x:Name="PART_Header"
                            Grid.Column="2"
                            Margin="0 0 5 0"
                            ContentSource="Header"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
      </Border>
      <ItemsPresenter Grid.Row="1"
                      Margin="{TemplateBinding Margin}"
                      x:Name="ItemsHost" />
    </Grid>

    <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="false">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="HasItems" Value="false">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
      </Trigger>
      <Trigger Property="IsSelected" Value="true">
        <Setter TargetName="Bd" Property="Background" Value="{t:ThemeResource ResourceKey=ControlSelectedBackground}" />
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />-->
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="true" />
          <Condition Property="IsSelectionActive" Value="false" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{t:ThemeResource ResourceKey=ControlSelectedBackground}" />
        <!--<Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />-->
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{t:ThemeResource ResourceKey=ControlDisabledOpacity}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
    <Setter Property="Background" Value="LightSteelBlue" />
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0 2" />
    <Setter Property="Foreground" Value="{t:ThemeResource ResourceKey=ControlForeground}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ap:BorderProperties.CornerRadius" Value="5" />
    <Setter Property="Template" Value="{StaticResource TreeViewItemTemplate}" />
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource TreeViewItemStyle}" />
</ResourceDictionary>